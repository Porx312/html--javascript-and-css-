// 5 exercises project euler 1-5
/* 
1 ) If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.

Find the sum of all the multiples of $3$ or $5$ below $1000$. */

function multipliesNumber(num){
let sum = 0;
for(let i = 0; i < num; i++){
  if(i % 3 == 0 || i % 5 == 0){
    sum += i
  }}
  return sum
}

// console.log(multipliesNumber(100))



/* <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
 */


function Fibonacci(num){
let a = 1
let b = 2
let c;
for(let i = 1;i < num;i++){
if(a < b){
  c = a + b
  a = b
  b = c
 console.log(c)
}
} 
}
// Fibonacci(50)
/* 

<p>The prime factors of $13195$ are $5, 7, 13$ and $29$.</p>
<p>What is the largest prime factor of the number $600851475143$?</p>
 */


function largestPrimeFactor(number){
let factor = 2 
while(factor <= number){
if(number % factor == 0){
  number /= factor
}else{
factor++
}
console.log(factor)
}
return factor
}
/* const number = 600851475143;
const largestFactor = largestPrimeFactor(number);

console.log("The largest prime factor of", number, "is", largestFactor); */



/* <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \times 99$.</p>
<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p>
 */


function isPalindrome(number) {
  // primero aca tenemos una funcion de ver si es un palindromo
  const str = String(number); 
  // aca convertimos el number en un string lo almacenamos en la variable str 
  const reversedStr = str.split('').reverse().join('');
  // luego let damos la vuelta a el str y lo agregamos en  otra variable
  return str === reversedStr;
  // aca confirmamos que sean iguales
}

function largestPalindromeProduct() {
  // luego tenemos una nueva fucnin para ver el largo del palindromo
  let largestPalindrome = 0;
  // inizializamos una variable en 0
  for (let i = 200; i >= 100; i--) {
    // ahora empezzams un bucle en i y mientras 999 sea mayor que 100 va a continuar y se disminuye termina en 100
    for (let j = 200; j >= 100; j--) {
      // aca igual pero en i
      const product = i * j;
      // tecnicamente aca se empieza a multiplicar i * j  seria 999 * 999 hasta llega a 0
      console.log(product);
      if (isPalindrome(product) && product > largestPalindrome) {
        // aca confirma que product sea true y prodcut sea mayyor que largestPalindrome 
        largestPalindrome = product;
        // mientras eso sea cierto largestPalindrome  se establece como el valor de product
      }
    }
  }

  return largestPalindrome;
}


/* 
const largestPalindrome = largestPalindromeProduct();
console.log("The largest palindrome made from the product of two 3-digit numbers is:", largestPalindrome); */
/* <p>$2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder.</p>
<p>What is the smallest positive number that is <dfn class="tooltip">evenly divisible<span class="tooltiptext">divisible with no remainder</span></dfn> by all of the numbers from $1$ to $20$?</p>

 */


function gcd(a, b) {
  if (b === 0) {
    return a;
  }
  return gcd(b, a % b);
}

function lcm(a, b) {
  return (a * b) / gcd(a, b);
}

function smallestDivisibleNumber() {
  let result = 1;
  for (let i = 2; i <= 20; i++) {
    result = lcm(result, i);
  }
  return result;
}
/* 
const smallestNumber = smallestDivisibleNumber();
console.log("The smallest positive number divisible by all numbers from 1 to 20 is:", smallestNumber); */


// 13. Roman to Integer

function romanToInt(s) {
  
// 1. Se define una función llamada `romanToInt` que toma como argumento una cadena `s` que representa un número romano.
  const romanValues = {
    'I': 1,
    'V': 5,
    'X': 10,
    'L': 50,
    'C': 100,
    'D': 500,
    'M': 1000
  };


// 2. Se declara un objeto `romanValues` que asigna los valores numéricos correspondientes a cada símbolo romano. Por ejemplo, `'I'` tiene un valor de `1`, `'V'` tiene un valor de `5`, y así sucesivamente.
  let result = 0;
  
  let prevValue = 0;
  // 3. Se inicializan las variables `result` y `prevValue` con un valor de `0`. `result` almacenará el resultado final del número entero convertido, y `prevValue` almacenará el valor del símbolo romano anterior.

  for (let i = s.length - 1; i >= 0; i--) {
    
// 4. Se inicia un bucle `for` que recorre la cadena `s` en orden inverso, comenzando desde el último carácter. La variable `i` se inicializa con el valor de `s.length - 1`.
    const currentValue = romanValues[s[i]];
    
// 5. En cada iteración del bucle, se obtiene el valor correspondiente al símbolo romano actual (`s[i]`) utilizando el objeto `romanValues` y se almacena en la variable `currentValue`.
    if (currentValue >= prevValue) {
      
      result += currentValue;
      // 6. Se verifica si `currentValue` es mayor o igual que `prevValue`. Si es así, se suma `currentValue` al resultado (`result`). Esto se debe a que los números romanos se suman cuando los símbolos están en orden descendente o cuando un símbolo se repite varias veces.
      
    } else {
      result -= currentValue;
      // 7. Si `currentValue` es menor que `prevValue`, se resta `currentValue` del resultado (`result`). Esto tiene en cuenta los casos en los que se utiliza la resta en los números romanos, como IV (4) o IX (9).
    }

    prevValue = currentValue;
    
// 8. Se actualiza `prevValue` con el valor de `currentValue` para la siguiente iteración.
  }

  return result;
  
// 9. Después de completar el bucle, se devuelve el valor final de `result`, que es el número entero equivalente al número romano dado.
}

const s = "IX";

// 10. Fuera de la función, se declara una variable `s` que contiene el número romano "MCMXCIV".
const number = romanToInt(s);

// 10. Fuera de la función, se declara una variable `s` que contiene el número romano "MCMXCIV".
/* console.log("The integer representation of", s, "is:", number);
 */
// 12. Finalmente, se muestra en la consola el mensaje que indica la representación entera del número romano.

/* object */

/* const box = document.querySelector('.box');
console.log(box.clientTop);
console.log(box.clientLeft);
console.log(box.clientWidth);
console.log(box.clientHeight);
console.log(box.offsetHeight);
console.log(box.offsetWidth)
console.log(box.scrollHeight);
console.log(box.scrollWidth); */
    
<></>
// box.style.height = `${box.scrollHeight}px`;


//  Fetch


